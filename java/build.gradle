import org.tukaani.xz.FilterOptions
import org.tukaani.xz.LZMA2Options
import org.tukaani.xz.X86Options
import org.tukaani.xz.XZOutputStream

import java.nio.file.Files
import java.util.zip.Deflater
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

buildscript {
    dependencies {
        classpath 'org.tukaani:xz:1.9'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'dev.babbaj'
version = '0.21'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.tukaani:xz:1.9'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'dev.babbaj'
            artifactId = 'nether-pathfinder'
            from components.java
        }
    }

    repositories {
        maven {
            name = "FileSystem"
            url = uri("file://" + System.getenv("MAVEN_DIR"))
        }
        maven {
            name = "GithubPackages"
            url = new URI("https://maven.pkg.github.com/Babbaj/nether-pathfinder")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

private static java.nio.file.Path getResourceOutput(SourceSet sourceSet) {
    return sourceSet.getOutput().getResourcesDir().toPath();
}

final String compileLibraryOutput = 'compilePathfinderLibrary';

tasks.register('buildNatives', Exec) {
    final File outputDir = new File(project.getBuildDir(), compileLibraryOutput)
    outputDir.mkdirs()

    workingDir outputDir
    commandLine new File(getProjectDir(), "multiplat_build.sh").absolutePath.toString(), getProjectDir().absolutePath.toString()
}

abstract class ZipDirectoryNoCompress extends DefaultTask {

    @InputDirectory
    File natives

    @OutputFile
    File getOutput() {
        return new File(getTemporaryDir(), "output.zip")
    }

    @TaskAction
    def run() {
        try (FileOutputStream fos = new FileOutputStream(output)
             ZipOutputStream zos = new ZipOutputStream(fos)
        ) {
            zos.setLevel(Deflater.NO_COMPRESSION)
            Files.list(natives.toPath()).forEach {
                zos.putNextEntry(new ZipEntry(it.getFileName().toString()))
                zos.write(Files.readAllBytes(it))
                zos.closeEntry()
            }
        }
    }
}

abstract class XZCompress extends DefaultTask {

    @InputFile
    File input

    @OutputFile
    File getOutput() {
        return new File(getTemporaryDir(), "output.xz")
    }

    @TaskAction
    def run() {
        try (FileOutputStream fos = new FileOutputStream(output);
             XZOutputStream xz = new XZOutputStream(fos, new FilterOptions[] {new X86Options(), new LZMA2Options()})
        ) {
            xz.write(Files.readAllBytes(input.toPath()))
        }
    }
}

tasks.register('joinNatives', ZipDirectoryNoCompress) {
    dependsOn buildNatives
    natives = new File(project.getBuildDir(), compileLibraryOutput)
}

tasks.register('compressNatives', XZCompress) {
    dependsOn joinNatives
    input = tasks.joinNatives.output
}

jar {
    dependsOn compressNatives
    into('') {
        from compressNatives.output
        rename { 'natives.xz' }
    }
}